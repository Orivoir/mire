{% extends 'base.html.twig' %}

{% block stylesheets %}
    <style>
        .load-icon {

            display: inline-block;
            transform-origin: center center;
            animation: spin .5s ease-in-out infinite ;
        }
    </style>
{% endblock %}

{% block title %}Register{% endblock %}

{% block body %}
    <h1>Register</h1>

    {{ form_start( registrationForm , {
        "attr": {
            "class": "form-container"
        }
    } ) }}

        {% set usernameError = form_errors(registrationForm.username) %}
        {% if usernameError != NULL %}
            <div class="form-error">
                {{usernameError|raw}}
            </div>
        {% endif %}

        <div>
            <i class="hide fas fa-spinner load-icon load-username-icon"></i>
            <i class="hide fas fa-check success-icon"></i>
            <i class="hide fas fa-times error-icon"></i>
        </div>
        <div class="form-group">
            {{form_label( registrationForm.username , "username" )}}
            {{ form_widget(registrationForm.username ) }}
        </div>

        {% set errorPlainPassword = form_errors(registrationForm.plainPassword)  %}
        {% if  errorPlainPassword != NULL %}
            <div class="form-error">
                {{errorPlainPassword|raw}}
            </div>
        {% endif %}

        <div class="form-group">
            {{form_label( registrationForm.plainPassword , "password" )}}
            {{ form_widget(registrationForm.plainPassword ) }}
        </div>

        <div class="form-group">
            {{form_label( registrationForm.password , "confirm password" )}}
            {{ form_widget(registrationForm.password ) }}
        </div>

        <input type="hidden" id="g-score" name="g-score" value="">

        <button
            type="submit"
            class="btn blue"
        >
            Register
        </button>

    {{ form_end(registrationForm) }}
{% endblock %}

{% block javascripts %}

    <script src="https://www.google.com/recaptcha/api.js?render=6LdSsdwUAAAAAHNFJPW71TznPDRrKd0IxeqoFyuR"></script>

    <script>

        grecaptcha.ready(function() {
            grecaptcha.execute(
                '6LdSsdwUAAAAAHNFJPW71TznPDRrKd0IxeqoFyuR',
                {action: 'login'}
            ).then(function(token) {

                const xhr = new XMLHttpRequest() ;

                xhr.open('POST' , '/recaptcha' );

                xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

                xhr.send( `token=${token}` ) ;

                xhr.onreadystatechange = function (){

                    let score = null ;

                    try {
                        const response = JSON.parse(xhr.responseText) ;

                        score = response.score ;
                    } catch( SyntaxError ) {

                        // return not JSON parse data
                        score = xhr.responseText.split('score')[1] ;
                    }

                    if( score >= .5 ) {

                        console.info('you are an good human ✅✅✅') ;

                    } else if ( !!score || score === .0 ) {
                        document.location.href = "https://www.google.com/recaptcha/intro/v3.html";
                        document.body = "" ;
                    }

                    if(!!score) {
                        document.querySelector('#g-score').value = score ;
                    }
                } ;


            } ) ;
        } ) ;
    </script>

    <script>

        // handler input
        const usernameInput = document.querySelector('input#registration_form_username') ;
        const passwordInput = document.querySelector('input#registration_form_plainPassword') ;
        const passwordConfirmInput = document.querySelector('input#registration_form_password') ;

        const onFieldRequireError = function( input ) {

            input.classList.add('error') ;
        } ;

        const onFieldRequireSuccess = function( input ) {

            input.classList.remove('error') ;
        } ;

        const iconLoaderUsername = document.querySelector('.load-username-icon') ;
        const iconSuccessUsername = document.querySelector('.success-icon') ;
        const iconErrorUsername = document.querySelector('.error-icon') ;

        const callbacks = {

            onRequireError: onFieldRequireError ,
            onRequireSuccess: onFieldRequireSuccess ,
            onFocus: function( input ) {

                if( /username/i.test(input.id) ) {

                    iconLoaderUsername.classList.remove('hide') ;
                    iconErrorUsername.classList.add('hide') ;
                    iconSuccessUsername.classList.add('hide') ;
                }
            } ,
            onBlur: function( input ) {

                if( /username/i.test(input.id) ) {

                    iconLoaderUsername.classList.add('hide') ;
                }
            } ,
        } ;

        function checkUsername( username )  {

            fetch( `/is-valid/${username}` , {
                method: 'GET' ,
                headers: {
                    'Accepts': 'application/json'
                }
            } ).then( response => response.json() )
            .then( data => {

                iconLoaderUsername.classList.add('hide') ;
                iconErrorUsername.classList.add('hide') ;
                iconSuccessUsername.classList.add('hide') ;

                if( data.success ) {

                    iconSuccessUsername.classList.remove('hide') ;

                } else {
                    iconErrorUsername.classList.remove('hide') ;
                }

            } ) ;
        }

        let checkIsEngaged = false ;
        let checkUsernameID = null ;
        const STEPS_CHECK_USERNAME = 275 ; // ms

        const handlerUsernameInput = new HandlerInput( usernameInput , {...callbacks , 
            onChangeText: function(text, lastCharEnter , input ) {

                iconLoaderUsername.classList.remove('hide') ;
                iconErrorUsername.classList.add('hide') ;
                iconSuccessUsername.classList.add('hide') ;

                if( checkIsEngaged ) {

                    clearTimeout( checkUsernameID ) ;

                    checkIsEngaged = false ;

                } else {

                    checkUsernameID = setTimeout(() => {

                        if( usernameInput.value ) {
                            checkUsername( text ) ;
                        }
                    }, STEPS_CHECK_USERNAME) ;

                    checkIsEngaged = true ;
                }


            }
        } ) ;
        const handlerPasswordInput = new HandlerInput( passwordInput , callbacks ) ;

        const handlerPasswordConfirmInput = new HandlerInput( passwordConfirmInput , callbacks ) ;

        handlerUsernameInput.require = true ;
        handlerPasswordInput.require = true ;
        handlerPasswordConfirmInput.require = true ;

    </script>

{% endblock %}